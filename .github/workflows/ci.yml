name: BRS-KB CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest pytest-cov

    - name: Lint with flake8
      run: |
        flake8 brs_kb --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 brs_kb --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format with black
      run: |
        black --check --diff brs_kb

    - name: Type check with mypy
      run: |
        mypy brs_kb --ignore-missing-imports

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run BRS-KB security tests
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Run payload database validation
      run: |
        python -c "from brs_kb import validate_payload_database; print('✅ Payload database validation:', validate_payload_database())"

    - name: Check for vulnerabilities in dependencies
      run: |
        pip install safety
        safety check

  # Testing Matrix
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=brs_kb --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Package Building
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, security, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  # Integration Testing
  integration:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.tar.gz

    - name: Test CLI functionality
      run: |
        python -c "import brs_kb; print('✅ BRS-KB import successful')"

    - name: Test CLI commands
      run: |
        brs-kb info | head -5
        brs-kb list-contexts | head -5
        brs-kb analyze-payload "<script>alert('test')</script>" | head -5

  # Documentation
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Check README structure
      run: |
        if ! grep -q "BRS-KB" README.md; then
          echo "❌ README.md missing project title"
          exit 1
        fi
        if ! grep -q "Installation" README.md; then
          echo "❌ README.md missing Installation section"
          exit 1
        fi
        if ! grep -q "Usage" README.md; then
          echo "❌ README.md missing Usage section"
          exit 1
        fi
        echo "✅ README structure validation passed"

    - name: Check changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "❌ CHANGELOG.md missing"
          exit 1
        fi
        echo "✅ CHANGELOG.md exists"

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, security, test, build, integration, docs]
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'release:')

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: BRS-KB v${{ github.run_number }}
        body: |
          ## BRS-KB Release v${{ github.run_number }}

          ### What's New
          - Enhanced XSS vulnerability detection
          - New modern web technology contexts
          - Improved payload database
          - CLI tool for security workflows
          - Security scanner integrations

          ### Installation
          ```bash
          pip install brs-kb==${{ github.run_number }}
          ```

          ### Quick Start
          ```bash
          brs-kb info
          brs-kb analyze-payload "<script>alert(1)</script>"
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/brs_kb-${{ github.run_number }}.tar.gz
        asset_name: brs_kb-${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run performance tests
      run: |
        python -c "
        import time
        from brs_kb import get_vulnerability_details, find_contexts_for_payload

        # Test payload analysis performance
        start_time = time.time()
        for i in range(100):
            result = find_contexts_for_payload('<script>alert(' + str(i) + ')</script>')
        end_time = time.time()

        print(f'✅ Performance test: 100 payload analyses in {end_time - start_time:.2f}s')
        print(f'   Average time per analysis: {(end_time - start_time)/100*1000:.2f}ms')
        "

    - name: Memory usage test
      run: |
        python -c "
        import psutil
        import os
        from brs_kb import get_all_contexts, get_all_payloads

        process = psutil.Process(os.getpid())
        memory_before = process.memory_info().rss / 1024 / 1024  # MB

        # Load all data
        contexts = get_all_contexts()
        payloads = get_all_payloads()

        memory_after = process.memory_info().rss / 1024 / 1024  # MB
        memory_used = memory_after - memory_before

        print(f'✅ Memory usage: {memory_used:.1f} MB for {len(contexts)} contexts and {len(payloads)} payloads')
        print(f'   Memory per context: {memory_used / len(contexts):.2f} MB')
        print(f'   Memory per payload: {memory_used / len(payloads):.2f} MB')
        "
